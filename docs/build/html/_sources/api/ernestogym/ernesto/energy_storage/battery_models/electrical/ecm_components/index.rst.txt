ernestogym.ernesto.energy_storage.battery_models.electrical.ecm_components
==========================================================================

.. py:module:: ernestogym.ernesto.energy_storage.battery_models.electrical.ecm_components


Submodules
----------

.. toctree::
   :maxdepth: 1

   /api/ernestogym/ernesto/energy_storage/battery_models/electrical/ecm_components/generic_component/index
   /api/ernestogym/ernesto/energy_storage/battery_models/electrical/ecm_components/ocv_generator/index
   /api/ernestogym/ernesto/energy_storage/battery_models/electrical/ecm_components/rc_parallel/index
   /api/ernestogym/ernesto/energy_storage/battery_models/electrical/ecm_components/resistor/index


Classes
-------

.. autoapisummary::

   ernestogym.ernesto.energy_storage.battery_models.electrical.ecm_components.Resistor
   ernestogym.ernesto.energy_storage.battery_models.electrical.ecm_components.ResistorCapacitorParallel
   ernestogym.ernesto.energy_storage.battery_models.electrical.ecm_components.OCVGenerator


Package Contents
----------------

.. py:class:: Resistor(name: str, resistance: Union[ernestogym.ernesto.energy_storage.battery_models.parameters.Scalar, ernestogym.ernesto.energy_storage.battery_models.parameters.LookupTableFunction])

   Bases: :py:obj:`ernestogym.ernesto.energy_storage.battery_models.electrical.ecm_components.generic_component.ECMComponent`


   Resistor element of Thevenin equivalent circuits.

   :param :
   :type : param name: identifier of the resistor
   :param :
   :type : type name: str
   :param :
   :type : param resistance: value of the resistance (Ohm)
   :param :
   :type : type resistance: float or int or pint.Quantity


   .. py:property:: resistance
      Getter of the R0 value. Depending on the x_names (inputs of the function), we retrieve components attribute
      among {SoC, SoH, Temp}.
      If R0 is a scalar, we don't need to provide any input.


   .. py:method:: reset_data()


   .. py:method:: init_component(v=None, r0=None)

      Initialize R0 component at t=0



   .. py:method:: get_r0_series(k=None)

      Getter of the specific value at step K, if specified, otherwise of the entire collection



   .. py:method:: compute_v(i)

      Compute the resistor potential V_r0, given in input the electric current I=I_r0
      #TODO: we will use 'k' when there will be the decay of resistance



   .. py:method:: compute_i(v_r0)

      Compute the flowing electric current I_r0=I, given in input the resistor potential V_r0



   .. py:method:: compute_dv(i, i_, dt)

      Compute the derivative of (dv_r0/dt) using the backward finite differences approach.
      We consider (dr0/dt) constant, so we can erase the second term of the derivation by parts.

      Inputs:
      :param i: current at time t
      :param i_: current at previous sampling time t-dt
      :param dt: delta of time



   .. py:method:: update_step_variables(r0, v_r0)

      Aggiorno le liste delle variabili calcolate



.. py:class:: ResistorCapacitorParallel(name, resistance: Union[ernestogym.ernesto.energy_storage.battery_models.parameters.Scalar, ernestogym.ernesto.energy_storage.battery_models.parameters.LookupTableFunction], capacity: Union[ernestogym.ernesto.energy_storage.battery_models.parameters.Scalar, ernestogym.ernesto.energy_storage.battery_models.parameters.LookupTableFunction])

   Bases: :py:obj:`ernestogym.ernesto.energy_storage.battery_models.electrical.ecm_components.generic_component.ECMComponent`


   Parallel Resistor-Capacitor (RC) element for Thevenin equivalent circuits.

   :param :
   :type : param resistance:
   :param :
   :type : type resistance:
   :param :
   :type : param capacity:
   :param :
   :type : type capacity:


   .. py:property:: resistance
      Getter of the R1 value. Depending on the x_names (inputs of the function), we retrieve components attribute
      among {SoC, SoH, Temp}.
      If R1 is a scalar, we don't need to provide any input.


   .. py:property:: capacity
      Getter of the C value. Depending on the x_names (inputs of the function), we retrieve components attribute
      among {SoC, SoH, Temp}.
      If C is a scalar, we don't need to provide any input.


   .. py:method:: get_r1_series(k=None)

      Getter of the specific value at step K, if specified, otherwise of the entire collection



   .. py:method:: get_c_series(k=None)

      Getter of the specific value at step K, if specified, otherwise of the entire collection



   .. py:method:: get_i_r1_series(k=None)

      Getter of the specific value at step K, if specified, otherwise of the entire collection



   .. py:method:: get_i_c_series(k=None)

      Getter of the specific value at step K, if specified, otherwise of the entire collection



   .. py:method:: reset_data()


   .. py:method:: init_component(r1=None, c=None, i_c=0, i_r1=0, v_rc=None)

      Initialize RC component at t=0



   .. py:method:: compute_v(i_r1)

      Compute the potential of the RC parallel V_r1=V_c.

      Inputs:
      :param i_r1: current I_r1 flowing through the resistor



   .. py:method:: compute_i_r1(v_rc)

      Compute the flowing electric current I_r1, given the voltage of the resistor V_r1.
      The formula for the computation of I_r1 at step k is:

          I_r1[k] = V_r1[k] / R1

      Inputs
      ------
      :param v_rc : voltage of resistor R1



   .. py:method:: compute_i_c(dv_c=None, i=None, i_r1=None)

      Compute the flowing electric current I_c, given the derivative of the capacitor voltage dV_c, by means of the
      capacitor characteristic formula: dV_c = I_c / C (with respect to time).
      In alternative, if available we can use the resistor current I_r1 and the circuit current I. In this case, we
      use the Kirchhoff's law at node: I_c = I - I_r1.

      Inputs
      ------
      param dv_c:
      param i:
      param i_r1:



   .. py:method:: compute_tau()

      Compute the



   .. py:method:: update_step_variables(r1, c, v_rc, i_r1, i_c)

      Aggiorno le liste delle variabili calcolate



.. py:class:: OCVGenerator(name, ocv_potential: Union[ernestogym.ernesto.energy_storage.battery_models.parameters.Scalar, ernestogym.ernesto.energy_storage.battery_models.parameters.LookupTableFunction])

   Bases: :py:obj:`ernestogym.ernesto.energy_storage.battery_models.electrical.ecm_components.generic_component.ECMComponent`


   Open Circuit Voltage (OCV) element for Thevenin equivalent circuits.



   .. py:property:: ocv_potential


   .. py:method:: init_component(v=None)

      Initialize V_ocv component at t=0



